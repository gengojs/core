{"version":3,"sources":["lib/modules/optify/index.js"],"names":[],"mappings":";;;;;;;;sBAAc,QAAQ;;;;oBACL,MAAM;;;;kBACR,IAAI;;;;oBACF,SAAS;;;;oBACT,MAAM;;;;;;;;;;;;;;;;;;;;qBAiBf,UAAC,OAAO,EAAK;;AAEnB,MAAI,QAAQ,CAAC;AACb,MAAI,oBAAE,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAE,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,OAAO,CAAC,KAC/D,IAAI,oBAAE,QAAQ,CAAC,OAAO,CAAC,EAAE;;AAE5B,WAAO,GAAG,kBAAK,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;;AAEzD,QAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;AACzB,cAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5B,aAAO,QAAQ,CAAC;KACjB,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;;AAEhC,cAAQ,GAAG,kBAAK,QAAQ,CAAC,gBAAG,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;AAC3D,aAAO,QAAQ,CAAC;KACjB,MAAM;AACL,wBAAK,MAAM,CAAC,KAAK,EACf,4DAA4D,CAAC,CAAC;AAChE,aAAO,EAAE,CAAC;KACX;GACF,MAAM,OAAO,QAAQ,IAAI,EAAE,CAAC;CAC9B","file":"lib/modules/optify/index.js","sourcesContent":["import _ from 'lodash';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport yaml from 'js-yaml';\r\nimport Hoek from 'hoek';\r\n/*\r\n    Definition: Options must be either a string or a plain object.\r\n\r\n    1. Options must be defined similar to how grunt defines their options:\r\n       {\r\n        //plugin name must be exact to the package name\r\n          superPluginName:{\r\n              //...\r\n          }\r\n       }\r\n\r\n    Side note: Every plugin created must offer default options and must \r\n    be responsible with letting the developers know about the options\r\n    for your plugin (through GitHub, etc).\r\n*/\r\nexport\r\ndefault (options) => {\r\n  /*jshint strict:false*/\r\n  var settings;\r\n  if (_.isPlainObject(options) && !_.isEmpty(options)) return options;\r\n  else if (_.isString(options)) {\r\n    // Normalize the string and if it ends in yml replace it\r\n    options = path.normalize(options.replace('yml', 'yaml'));\r\n    // Load the json file\r\n    if (/.json/.test(options)) {\r\n      settings = require(options);\r\n      return settings;\r\n    } else if (/.yaml/.test(options)) {\r\n      // Load yaml\r\n      settings = yaml.safeLoad(fs.readFileSync(options, 'utf8'));\r\n      return settings;\r\n    } else {\r\n      Hoek.assert(false,\r\n        'Woops! The configuration file must be either JSON or YAML.');\r\n      return {};\r\n    }\r\n  } else return settings || {};\r\n};"]}