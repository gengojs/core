{"version":3,"sources":["lib/modules/plugify/index.js"],"names":[],"mappings":";;;;;;AACA,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;qBAGnB,UAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCtC,MAAI,aAAa,GAAG,EAAE,CAAC;;AAEvB,MAAI,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;AAC5B,KAAC,CAAC,MAAM,CAAC,OAAO,EAAE,UAAS,IAAI,EAAE;;AAE/B,UAAI,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,EAC5B,qCAAqC,CAAC,CAAC;AACzC,UAAI,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,EACjC,sDAAsD,CAAC,CAAC;;AAE1D,mBAAa,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;KAC5B,CAAC,CAAC;GACJ,MAAM,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,aAAa,GAAG,OAAO,CAAC,KAClD,IAAI,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;AAC9B,QAAI,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,EACpC,sDAAsD,CAAC,CAAC;AAC1D,iBAAa,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;GAC/B;;AAED,eAAa,CAAC,OAAO,CAAC,UAAA,MAAM,EAAI;;AAE9B,QAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,EAC/B,0CAA0C,CAAC,CAAC;AAC9C,QAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,EAClC,oCAAoC,CAAC,CAAC;AACxC,QAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,WAAQ,EAAE,MAAM,CAAC,EACvC,6CAA6C,CAAC,CAAC;AACjD,QAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,WAAQ,EAAE,MAAM,CAAC,EACvC,6CAA6C,CAAC,CAAC;AACjD,YAAQ,CAAC,IAAI,WAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,WAAQ,CAAC,CAAC;GAClD,EAAE,OAAO,CAAC,CAAC;CACb","file":"lib/modules/plugify/index.js","sourcesContent":["// Load modules\r\nvar _ = require('lodash');\r\nvar Hoek = require('hoek');\r\n\r\nexport\r\ndefault (plugins, callback, context) => {\r\n  /*jshint strict:false*/\r\n  /*\r\n    Definition: \r\n    A plugin must be either a function, an array containing functions, \r\n    or an plain object with a set of functions.\r\n    \r\n    1. A plugin must return a plain object \r\n    with the main (export) function and its package.\r\n    \r\n    2. A package must contain the name and type of plugin.\r\n\r\n    // the export function\r\n    function ship(){\r\n      var pkg = require('./package.json');\r\n      //used for options\r\n      pkg.type = 'parser';\r\n      return {\r\n         main:myfunction,\r\n         package:pkg\r\n      };\r\n    }\r\n    \r\n    3. A plain object exporting multiple \r\n    plugins is called a 'pack' or 'gengo pack'.\r\n    \r\n    //export object\r\n    var gengopack = {\r\n        handler: ship1,\r\n        // ! You should not reference ship2 as ship1\r\n        // ...in short, been there done that! (failed)\r\n        // ...in long, for some reason the package (no matter how different)\r\n        // it will return the package of the last ship\r\n        parser: ship2\r\n        //...\r\n    };\r\n */\r\n  var registrations = [];\r\n  // check type!\r\n  if (_.isPlainObject(plugins)) {\r\n    _.forOwn(plugins, function(ship) {\r\n      // assert\r\n      Hoek.assert(_.isFunction(ship),\r\n        'Uh oh! The ship must be a function!');\r\n      Hoek.assert(_.isPlainObject(ship()),\r\n        'Woops! Did the ship forget to return a plain object?');\r\n      // add the ship\r\n      registrations.push(ship());\r\n    });\r\n  } else if (_.isArray(plugins)) registrations = plugins;\r\n  else if (_.isFunction(plugins)) {\r\n    Hoek.assert(_.isPlainObject(plugins()),\r\n      'Woops! Did the ship forget to return a plain object?');\r\n    registrations.push(plugins());\r\n  }\r\n  // callback!\r\n  registrations.forEach(plugin => {\r\n    // Assert\r\n    Hoek.assert(_.has(plugin, 'main'),\r\n      'Woops! Did you forget the main function?');\r\n    Hoek.assert(_.has(plugin, 'package'),\r\n      'Woops! Did you forget the package?');\r\n    Hoek.assert(_.has(plugin.package, 'type'),\r\n      'Woops! Did you forget the \"type\" of plugin?');\r\n    Hoek.assert(_.has(plugin.package, 'name'),\r\n      'Woops! Did you forget the \"name\" of plugin?');\r\n    callback.bind(this)(plugin.main, plugin.package);\r\n  }, context);\r\n};"]}