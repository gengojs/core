{
  "name": "gengojs-core",
  "version": "0.0.1-beta.1",
  "description": "The core of gengo.js that manages i18n and l10n.",
  "main": "index.js",
  "scripts": {
    "test": "grunt && mocha ./tests/core/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/iwatakeshi/gengojs-core.git"
  },
  "keywords": [
    "i18n",
    "gengojs",
    "l10n",
    "internationalization",
    "localization",
    "translate",
    "plugin",
    "plugins"
  ],
  "author": {
    "name": "iwatakeshi"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/iwatakeshi/gengojs-core/issues"
  },
  "homepage": "https://github.com/iwatakeshi/gengojs-core",
  "dependencies": {
    "debug": "^2.1.3",
    "hoek": "^2.12.0",
    "js-yaml": "^3.2.7",
    "lodash": "^3.6.0",
    "uberproto": "^1.1.2"
  },
  "devDependencies": {
    "chai": "^2.2.0",
    "grunt": "^0.4.5",
    "grunt-babel": "^5.0.0",
    "grunt-contrib-jshint": "^0.11.1",
    "load-grunt-tasks": "^3.1.0",
    "mocha": "^2.2.1"
  },
  "readme": "# gengojs-core\r\n\r\n[![Build Status](https://travis-ci.org/iwatakeshi/gengojs-core.svg?branch=master)](https://travis-ci.org/iwatakeshi/gengojs-core)\r\n[![Dependency Status](https://david-dm.org/iwatakeshi/gengojs-core.png)](https://github.com/iwatakeshi/gengojs-core/blob/master/package.json) [![License Status](http://img.shields.io/npm/l/gengojs-core.svg)](https://github.com/iwatakeshi/gengojs-core/blob/master/LICENSE) [![Downloads](http://img.shields.io/npm/dm/gengojs-core.svg)]() [![Version](http://img.shields.io/npm/v/gengojs-core.svg)]()\r\n\r\n[![NPM](https://nodei.co/npm/gengojs-core.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/gengojs-core/)\r\n\r\n\r\nThe core of gengo.js that manages i18n and l10n.\r\n\r\n##Introduction\r\n\r\ngengojs-core is the actual core of the upcoming [gengojs](https://github.com/iwatakeshi/gengojs). It serves to be\r\na server agnostic middleware supporting the popular servers such as Express, \r\nKoa, and Hapi, and even more with ease. It is also, modulartastic, and easy\r\nto debug.\r\n\r\nTo get started, there are three things that the core does:\r\n\r\n* Initialize\r\n* Ship\r\n* Parse\r\n\r\n**Initialize** is the starting point of the core. It handles the initialization of\r\nplugins, options, and also the backends. The reason the backend is initialized first is\r\nbecause of the possible use of asynchronous programming needs. Note that if you are to\r\ncreate a plugin for the backend, you will need to load every locale into memory so that\r\nthe parser can readily use the data (or contribute your knowledge to improve the core).\r\n\r\n**Ship** is actually a function that applies the API to requests and also to the view\r\nof whatever the response supplies. It begins with getting the locale from the client,\r\nletting the router know about the current path, applying the locale to the localisation\r\nplugin, and finally assigning the API such as `__` or `__l` (can be changed) to the objects\r\nthat are provided by the request and response or even to themselves.\r\n\r\n**Parse** is the final step in the core. It is called only when the API are called such as\r\n`__('Hello')`. In this step, the parser plugin must return the i18ned string.\r\n\r\n**So...** you may be wondering why is the core a seperate module from the rest? The reason is\r\nbecause having the core on its own allows you developers to create awesome plugins. I personally\r\nfeel as if i18n modules are a bit limited in what it can do and myself as well. \r\n\r\nAnyways, one thing to note is that this module should not be used on it's own. The actual i18n library is\r\n[gengojs](https://github.com/iwatakeshi/gengojs). If you want to extend the core to support\r\nserver x, then here is where you want to do that but if you want to create the wrapper for server x,\r\nthen the gengojs is where you would do that.\r\n\r\n##Getting Started\r\n\r\n**How gengo works** is similar to how Hapi works in terms of creating plugins and how Grunt works\r\nin terms of options (but I hope you guys can improve option distribution to specific plugins).\r\n\r\nFor creating plugins, the one thing to keep in mind is core's `this` context. When a plugin is initialized,\r\nthe core calls the plugin as it binds its context to that plugin. There are different ways to handle the\r\ncontext so see **Creating Plugins**. Another thing to keep in mind is *dependencies*. Dependencies are really\r\ninternal API. For example, the parser plugin needs to know about the data. Therefore it is dependent on the\r\nbackend and is expecting the backend to supply an internal API to retrive the locale/data. The following shows\r\nthe type of plugins that are available for you to create and their dependencies:\r\n\r\n####Type of Plugins and its Dependencies\r\n\r\n* Backend (Storage)\r\n\t* None\r\n* Header (Header parsing)\r\n\t* None \r\n* Router (Path or Subdomain parsing for data transitions in views)\r\n\t* None\r\n* Localize (Localisation)\r\n\t* `this.header.detectLocale()` or `this.header.getLocale()` from Header\r\n* Handler (Applys the API/ to the objects)\r\n\t* `this.api`\r\n* API (The definition of the API such as `__` and `__l`)\r\n\t* `this.header.detectLocale()` or `this.header.getLocale()` from Header\r\n\t* `this.localize()` from Localize\r\n* Parser (i18ns the string)\r\n\t* `this.header.detectLocale` or `this.header.getLocale` from Header\r\n\t* `this.backend.find()` from Backend\r\n\t* `this.router.path()` from Router\r\n\r\nIf you noticed, you can pretty much change anything you like. It's designed that way so that if there was something I implemented that you didn't like, you can just create your own plugin for that part (or contribute to the original plugin and PR it). \r\n\r\nNow to make the internal API work, you would need to expose the internal API at the end of your\r\nplugins. The following shows which API needs to attach to the context:\r\n\r\n####Internal API to Expose By Plugin\r\n\r\n* Backends\r\n\t* `this.backend = [your backend plugin instance]`\r\n\t\t* Returns a class\r\n* Header\r\n\t* `this.header = [...]`\r\n\t\t* Returns a class\r\n* Router\r\n\t* `this.router = [...]`\r\n\t\t* Returns a class\r\n* Localize\r\n\t* `this.localize = [...]`\r\n\t\t* Returns a class\r\n* Handler\r\n\t* none\r\n* API\r\n\t* `this.api = [...]`\r\n\t\t* Returns an object with keys of `i18n` and `l10n`\r\n\r\nTo see how that works see **Creating Plugins**\r\n\r\n##Creating Plugins\r\n\r\n**Creating plugins** is quite similar, if not, the same as creating plugins for Hapi. As mentioned above,\r\nthe core is really all about context. The following shows you two ways to create your plugin:\r\n\r\n\r\n###Using the Context Directly\r\n\r\n```js\r\nfunction MyClass (){\r\n   // 'this' is the core's context\r\n   // 'header' is the internal API\r\n   console.log(this.header.getLocale())\r\n   //options is also available \r\n   console.log(this.options)\r\n   //or you can use the plugin specific options\r\n   console.log(this.plugins._api.options)\r\n\r\n   //do other stuff\r\n\r\n   //the internal API to expose is set\r\n   this.api = {/*...*/}\r\n}\r\n\r\n// Hapi-ish style plugin\r\nmodule.exports = function() {\r\n  var pkg = require('./package');\r\n // ! add type\r\n  pkg.type = 'parser';\r\n  return {\r\n  \tmain:MyClass,\r\n  \tpackage:pkg\r\n  };\r\n};\r\n```\r\n\r\n###Using the Context Indirectly\r\n\r\n```js\r\nfunction MyClass (lodash){\r\n   \r\n   //do other stuff\r\n   this.getLocale = function(){\r\n   \t\t//do something with lodash...\r\n   }\r\n}\r\n\r\nfunction ship(){\r\n\t//then internal API to expose\r\n\tthis.header = new MyClass(this.utils._); // where '_' is lodash\r\n}\r\n\r\n\r\n// Hapi-ish style plugin\r\nmodule.exports = function() {\r\n  var pkg = require('./package');\r\n // ! add type\r\n  pkg.type = 'header';\r\n  return {\r\n  \tmain:ship,\r\n  \tpackage:pkg\r\n  };\r\n};\r\n```\r\n\r\nThe type of usage depends on whether the plugin needs to expose an internal API or \r\na final result like the `parser` where it returns the i18ned string or like the `api`\r\nwhere it returns the API object.\r\n\r\nNow you may be wondering, *Can I release a set of plugins?* The answer to this question is\r\n**YES!** and here are some tips when creating plugins:\r\n\r\n* Create them individually\r\n* Export and test them together\r\n\r\nI call these sets, *packs* or *gengo-pack*. To create a pack, simply export the individual\r\n*ships* like the following:\r\n\r\n```js\r\nmodule.exports = function(){\r\n  return {\r\n    parser: /*parser ship*/,\r\n    router: /*router ship*/,\r\n    backend: /*backend ship*/,\r\n    api:/*api ship*/,\r\n    header: /*header ship*/,\r\n    localize: /*localize ship*/,\r\n    handler: /*handler ship*/\r\n  }\r\n};\r\n```\r\n\r\nAs of 3/21/2015, I haven't released any plugins. So you may not be able to test anything or even use it. Hopefully by the end this month or mid next month I will have some plugins released individually. That way, you can test and even see how I have done things and maybe even do something better than I did.\r\n\r\n##Contributing\r\n\r\nFeel free to contribute. To contribute, see the requirements. If you have any suggestions,\r\ncreate issues at the core's [GitHub Issues](https://github.com/iwatakeshi/gengojs-core)\r\n\r\n* Requirements\r\n\t* Grunt\r\n\t* [Airbnb Javascript Style](https://github.com/airbnb/javascript#testing)\r\n\t* Mocha\r\n\t* [semver versioning](http://semver.org/)\r\n\t* Fork and Pull\r\n\t* Your skills\r\n\r\n##Debug\r\n\r\nThe core uses [debug](https://github.com/visionmedia/debug) to output debugging statements. To debug,\r\nsimply set the type of debug in the shell:\r\n\r\nUnix:\r\n\r\n```bash\r\n$ DEBUG=core\r\n```\r\n\r\nWindows\r\n\r\n```bash\r\n$ SET DEBUG=core\r\n```\r\n\r\nHere are the available types:\r\n\r\n* core\r\n* plugins\r\n* parser\r\n* router\r\n* backend\r\n* header\r\n* api\r\n* localize\r\n* handler\r\n\r\n\r\n##Build\r\n\r\nRun `grunt` to build. This will check for syntax issues.\r\n\r\n##Tests\r\n\r\nRun `npm test`.",
  "readmeFilename": "README.md",
  "gitHead": "03fba1780392ce24b636d784aeac263d21475d33",
  "_id": "gengojs-core@0.0.1-beta.1",
  "_shasum": "c350b3b94ea0bc53ed9ca0875baf51d4560e3569",
  "_from": "gengojs-core@*"
}
