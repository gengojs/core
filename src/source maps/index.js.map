{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;uBAAgB,YAAY;;;;kCAIvB,sBAAsB;;sBACb,QAAQ;;;;AACtB,IAAM,GAAG,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC;;;;;;;IAMvC,KAAK;;;;;;;;AAOE,WAPP,KAAK,CAOG,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE;0BAPpC,KAAK;;AAQL,OAAG,CAAC,KAAK,aAAW,KAAK,CAAC,IAAI,yBAA2B;;KAEtD,IAAI,CAAC,UAAU,EAAG,IAAI,CAAC,OAAO,GAAG,qBAAI,OAAO,CAAE;;KAE9C,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,GAAG,gCAAO,OAAO,CAAC,CAAC,CAAC;;AAErD,QAAI,CAAC,OAAO,GAAG,iCAAQ,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;;AAExD,QAAI,CAAC,oBAAE,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAC1D,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;GACpC;;;;;;;;;;;;;eAlBC,KAAK;;WAyBJ,eAAC,MAAM,EAAW;AACnB,SAAG,CAAC,KAAK,aAAW,KAAK,CAAC,IAAI,mBAAqB,CAAC;;;wCADvC,IAAI;AAAJ,YAAI;;;AAGjB,aAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,kCAAS,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;KAClE;;;;;;;;;;WAOC,cAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AACjB,SAAG,CAAC,KAAK,aAAW,KAAK,CAAC,IAAI,kBAAoB,CAAC;;AAEnD,UAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;;AAE3C,UAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;;AAE3C,UAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;;AAE7C,uCAAQ,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KACrC;;;;;;;;;WAMG,kBAAG;AACP,SAAG,CAAC,KAAK,aAAW,KAAK,CAAC,IAAI,oBAAsB,CAAC;;AAErD,aAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KAChD;;;SAxDG,KAAK;;;qBA6DI,UAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAK;AAC7C,cAAY,CAAC;AACb,SAAO,IAAI,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;CAC9C","file":"index.js","sourcesContent":["import pkg from '../package';\nimport {\n  inputify, plugify, optify, servify\n}\nfrom 'gengojs-core-modules';\nimport _ from 'lodash';\nconst log = require('gengojs-debug')('core');\n\n/**\n * The core of gengo.js\n * @class Gengo\n */\nclass Gengo {\n  /**\n   * @constructor \n   * @param {Object} options The options for each plugin.\n   * @param {Object | Array | Function} plugins The plugin(s) for the core.\n   * @param {Object} defaults The default plugins for the core.\n   */\n  constructor(options, plugins, defaults) {\n      log.debug(`class: ${Gengo.name}`, `process: constructor`)\n        // Current version\n        .info('version:', (this.version = pkg.version))\n        // Options\n        .info('options: ', this.options = optify(options));\n      // Set Plugins\n      this.plugins = plugify(plugins, this.options, defaults);\n      // Backend plugin\n      if (!_.isEmpty(this.plugins.backend) && this.plugins.backend)\n        this.plugins.backend.apply(this);\n    }\n    /**\n     * Parses and i18ns the phrase.\n     * @param {Object | String} phrase The phrase to i18n.\n     * @param {Array} args The arguments to apply to the phrase.\n     * @returns {String} The i18ned phrase.\n     */\n  parse(phrase, ...args) {\n      log.debug(`class: ${Gengo.name}`, `process: parse`);\n      // Parser plugin\n      return this.plugins.parser.apply(this, [inputify(phrase, args)]);\n    }\n    /**\n     * The Middleware for Node frameworks\n     * @param {Object} req The request object.\n     * @param {Object} res The response object.\n     * @param {Function} next The next function.\n     */\n  ship(req, res, next) {\n      log.debug(`class: ${Gengo.name}`, `process: ship`);\n      // Header plugin\n      this.plugins.header.apply(this, arguments);\n      // Router plugin\n      this.plugins.router.apply(this, arguments);\n      // Localize plugin\n      this.plugins.localize.apply(this, arguments);\n      // Apply API to the objects/request/response\n      servify(this).apply(req, res, next);\n    }\n    /**\n     * Applies the API to req, res, and other objects.\n     * @param {...arguments} arguments The arguments to apply the API.\n     * @return {Object} The applied object\n     */\n  assign() {\n    log.debug(`class: ${Gengo.name}`, `process: assign`);\n    // API plugin\n    return this.plugins.api.apply(this, arguments);\n  }\n}\n/**\n * Creates a new Gengo instance\n */\nexport default (options, plugins, defaults) => {\n  'use strict';\n  return new Gengo(options, plugins, defaults);\n};"],"sourceRoot":"/source/"}